//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Fantacode Studios/Dialogue & Cutscene System/Resources/InputAction/Input Action Manager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Action Manager"",
    ""maps"": [
        {
            ""name"": ""Cutscene"",
            ""id"": ""9fe10695-38de-45b7-bbd4-ff5ba25b55ac"",
            ""actions"": [
                {
                    ""name"": ""ChoiceScroll"",
                    ""type"": ""Button"",
                    ""id"": ""acee3720-5bca-4aed-96c6-4ef2e4815022"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipDialogue"",
                    ""type"": ""Button"",
                    ""id"": ""871a0bb5-e349-4972-94dc-475db432e574"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChoiceSelect"",
                    ""type"": ""Button"",
                    ""id"": ""7f6a5f66-87cf-4d59-9854-0c3e018ea215"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""7a5ed595-3320-4226-b712-9d7d713aae98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""70dba134-ffbc-416b-8112-018668dc15c1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChoiceScroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""70bfb243-86da-4ba6-bde0-7e6aa4e2a91e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChoiceScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ef353338-037d-4865-9d92-73575c24e8f0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChoiceScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""104c76c5-745b-45cf-a1ec-264a1cd4fffe"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChoiceScroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""85498e75-393c-4aa3-a3ca-b000128a65f3"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""ChoiceScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0f2fa85a-78f1-43db-a31b-98f53962ff38"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""ChoiceScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""541d175e-0d85-4e3a-acab-244d6161f495"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""SkipDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89521c5f-8b62-462d-bd39-88fef7d95393"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SkipDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcbabc1e-e015-4140-8cdc-068838e308e0"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SkipDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab05371b-845d-4c8a-98e2-1ee8b95c57b2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""SkipDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d412086f-9edd-44b9-867a-410f86f0b290"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""ChoiceSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9859e21-c622-4745-a50d-836ce89502e7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChoiceSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc9f1448-0b84-481a-ad2e-94841e43a5bf"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChoiceSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa900bb8-422a-42f8-ace6-03d4e9ca2de8"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64401a97-5a42-4a34-b934-b63462eac0ef"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShock4GamepadAndroid>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Cutscene
        m_Cutscene = asset.FindActionMap("Cutscene", throwIfNotFound: true);
        m_Cutscene_ChoiceScroll = m_Cutscene.FindAction("ChoiceScroll", throwIfNotFound: true);
        m_Cutscene_SkipDialogue = m_Cutscene.FindAction("SkipDialogue", throwIfNotFound: true);
        m_Cutscene_ChoiceSelect = m_Cutscene.FindAction("ChoiceSelect", throwIfNotFound: true);
        m_Cutscene_Interact = m_Cutscene.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cutscene
    private readonly InputActionMap m_Cutscene;
    private List<ICutsceneActions> m_CutsceneActionsCallbackInterfaces = new List<ICutsceneActions>();
    private readonly InputAction m_Cutscene_ChoiceScroll;
    private readonly InputAction m_Cutscene_SkipDialogue;
    private readonly InputAction m_Cutscene_ChoiceSelect;
    private readonly InputAction m_Cutscene_Interact;
    public struct CutsceneActions
    {
        private @InputActionManager m_Wrapper;
        public CutsceneActions(@InputActionManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChoiceScroll => m_Wrapper.m_Cutscene_ChoiceScroll;
        public InputAction @SkipDialogue => m_Wrapper.m_Cutscene_SkipDialogue;
        public InputAction @ChoiceSelect => m_Wrapper.m_Cutscene_ChoiceSelect;
        public InputAction @Interact => m_Wrapper.m_Cutscene_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Cutscene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CutsceneActions set) { return set.Get(); }
        public void AddCallbacks(ICutsceneActions instance)
        {
            if (instance == null || m_Wrapper.m_CutsceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CutsceneActionsCallbackInterfaces.Add(instance);
            @ChoiceScroll.started += instance.OnChoiceScroll;
            @ChoiceScroll.performed += instance.OnChoiceScroll;
            @ChoiceScroll.canceled += instance.OnChoiceScroll;
            @SkipDialogue.started += instance.OnSkipDialogue;
            @SkipDialogue.performed += instance.OnSkipDialogue;
            @SkipDialogue.canceled += instance.OnSkipDialogue;
            @ChoiceSelect.started += instance.OnChoiceSelect;
            @ChoiceSelect.performed += instance.OnChoiceSelect;
            @ChoiceSelect.canceled += instance.OnChoiceSelect;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(ICutsceneActions instance)
        {
            @ChoiceScroll.started -= instance.OnChoiceScroll;
            @ChoiceScroll.performed -= instance.OnChoiceScroll;
            @ChoiceScroll.canceled -= instance.OnChoiceScroll;
            @SkipDialogue.started -= instance.OnSkipDialogue;
            @SkipDialogue.performed -= instance.OnSkipDialogue;
            @SkipDialogue.canceled -= instance.OnSkipDialogue;
            @ChoiceSelect.started -= instance.OnChoiceSelect;
            @ChoiceSelect.performed -= instance.OnChoiceSelect;
            @ChoiceSelect.canceled -= instance.OnChoiceSelect;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(ICutsceneActions instance)
        {
            if (m_Wrapper.m_CutsceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICutsceneActions instance)
        {
            foreach (var item in m_Wrapper.m_CutsceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CutsceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CutsceneActions @Cutscene => new CutsceneActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    public interface ICutsceneActions
    {
        void OnChoiceScroll(InputAction.CallbackContext context);
        void OnSkipDialogue(InputAction.CallbackContext context);
        void OnChoiceSelect(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
